/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.edu.ups.vista;

import ec.edu.ups.controlador.BaseDeDatos;
import ec.edu.ups.controlador.ControladorPersonaBD;
import ec.edup.ups.modelo.Persona;

import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
/**
 *
 * @author tians
 */
public class VistaPrincipalReportes extends javax.swing.JFrame {

    /**
     * Creates new form VistaPrincipalReportes
     */
    public VistaPrincipalReportes() {
        System.out.println("hola");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        txtCedula = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        jButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton1.setText("Generar PERSONAS PDF");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton2.setText("Generar DIRECCIONES PDF");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton3.setText("Grafica Pastel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton4.setText("Grafica Barra");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton5.setText("Grafica Linea ");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("0301681748\n0102073778\n0107551012\n");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jButton5))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addGap(0, 18, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String url = "jdbc:postgresql://localhost:5432/MiBase";
        String user = "postgres";
        String password = "bowi8998";
        try {
            BaseDeDatos base = new BaseDeDatos(url, user, password);
            base.conectar();
            File reporte=new File("src/ec/edu/ups/reportes/personas.jasper");
            JasperReport reporteJasper = (JasperReport) JRLoader.loadObject(reporte);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporteJasper, null, base.getConexionDb());
            JasperExportManager.exportReportToPdfFile(jasperPrint, "Report.pdf");
            JasperViewer.viewReport(jasperPrint,false);
            base.desconectar();
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String url = "jdbc:postgresql://localhost:5432/MiBase";
        String user = "postgres";
        String password = "bowi8998";
        ControladorPersonaBD control=new ControladorPersonaBD();
        String parametro=txtCedula.getText();
        Persona persona=control.buscar(parametro);
        try {
            BaseDeDatos base = new BaseDeDatos(url, user, password);
            base.conectar();
            Map parametros=new HashMap();
            parametros.clear();
            parametros.put("DIR_CEDULA", parametro);
            parametros.put("PER_NOMBRE", persona.getNombre());
            parametros.put("PER_GENERO", persona.getGenero());
            parametros.put("PER_EDAD", String.valueOf(persona.getEdad()));
            parametros.put("PER_APELLIDO", persona.getApellido());
            parametros.put("PER_SALARIO", String.valueOf(persona.getSalario()));
            System.out.println(parametros.get("DIR_CEDULA"));
            File reporte=new File("src/ec/edu/ups/reportes/direcciones.jasper");
            JasperReport reporteJasper = (JasperReport) JRLoader.loadObject(reporte);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporteJasper, parametros, base.getConexionDb());
            JasperExportManager.exportReportToPdfFile(jasperPrint, "Reporte.pdf");
            JasperViewer.viewReport(jasperPrint,false);
            base.desconectar();
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String url = "jdbc:postgresql://localhost:5432/MiBase";
        String user = "postgres";
        String password = "bowi8998";
        BaseDeDatos base = new BaseDeDatos(url, user, password);
        pastelEdad(base);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String url = "jdbc:postgresql://localhost:5432/MiBase";
        String user = "postgres";
        String password = "bowi8998";
        BaseDeDatos base = new BaseDeDatos(url, user, password);
        barrasSalario(base);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String url = "jdbc:postgresql://localhost:5432/MiBase";
        String user = "postgres";
        String password = "bowi8998";
        BaseDeDatos base = new BaseDeDatos(url, user, password);
        lineas(base);
    }//GEN-LAST:event_jButton5ActionPerformed

    public void pastelEdad(BaseDeDatos con) {
        con.conectar();
        int vectorEdad[] = new int[112];
        try {
            Statement sta = con.getConexionDb().createStatement();
            ResultSet resultado = sta.executeQuery("SELECT \"PER_EDAD\" FROM \"PERSONA\"");
            int i = 0;
            while (resultado.next()) {
                vectorEdad[i] = resultado.getInt("PER_EDAD");
                i++;
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }
        con.desconectar();
        int menor15 = 0;
        int entre1620 = 0;
        int entre2130 = 0;
        int entre3140 = 0;
        int mayor40 = 0;
        for (int j = 0; j < vectorEdad.length; j++) {
            if (vectorEdad[j] <= 15) {
                menor15++;
            } else if (vectorEdad[j] >= 16 && vectorEdad[j] <= 20) {
                entre1620++;
            } else if (vectorEdad[j] >= 21 && vectorEdad[j] <= 30) {
                entre2130++;
            } else if (vectorEdad[j] >= 31 && vectorEdad[j] <= 40) {
                entre3140++;
            } else if (vectorEdad[j] > 40) {
                mayor40++;
            }
        }

        DefaultPieDataset data = new DefaultPieDataset();
        data.setValue("Menor 15", menor15);
        data.setValue("Entre 16-20", entre1620);
        data.setValue("Entre 21-30", entre2130);
        data.setValue("Entre 31-40", entre3140);
        data.setValue("Mayor 40", mayor40);
        // Creando el Grafico
        JFreeChart chart = ChartFactory.createPieChart(
                "EDAD",
                data,
                true,
                true,
                false);

        // Mostrar Grafico
        ChartFrame frame = new ChartFrame("JFreeChart", chart);
        frame.pack();
        frame.setVisible(true);
    }

    public static void barrasSalario(BaseDeDatos con) {
        con.conectar();
        String vectorSalarioEdad[][] = new String[111][3];
        try {
            Statement sta = con.getConexionDb().createStatement();
            ResultSet resultado = sta.executeQuery("SELECT \"PER_EDAD\",\"PER_GENERO\",\"PER_SALARIO\" FROM \"PERSONA\"");
            int i = 0;
            while (resultado.next()) {
                vectorSalarioEdad[i][0] = String.valueOf(resultado.getInt("PER_EDAD"));
                vectorSalarioEdad[i][1] = resultado.getString("PER_GENERO");
                vectorSalarioEdad[i][2] = String.valueOf(resultado.getDouble("PER_SALARIO"));
                i++;
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }
        con.desconectar();
        double menor15F = 0;
        double contmenor15F = 0;
        double menor15M = 0;
        double contmenor15M = 0;
        double entre1620F = 0;
        double contentre1620F = 0;
        double entre1620M = 0;
        double contentre1620M = 0;
        double entre2130F = 0;
        double contentre2130F = 0;
        double entre2130M = 0;
        double contentre2130M = 0;
        double entre3140F = 0;
        double contentre3140F = 0;
        double entre3140M = 0;
        double contentre3140M = 0;
        double mayor40F = 0;
        double contmayor40F = 0;
        double mayor40M = 0;
        double contmayor40M = 0;
        for (int j = 0; j < vectorSalarioEdad.length; j++) {
            if (Double.parseDouble(vectorSalarioEdad[j][0]) <= 15) {
                if (vectorSalarioEdad[j][1].equalsIgnoreCase("femenino")) {
                    menor15F = menor15F + Double.parseDouble(vectorSalarioEdad[j][2]);
                    contmenor15F++;
                } else {
                    menor15M = menor15M + Double.parseDouble(vectorSalarioEdad[j][2]);
                    contmenor15M++;
                }
            } else if (Double.parseDouble(vectorSalarioEdad[j][0]) >= 16 && Double.parseDouble(vectorSalarioEdad[j][0]) <= 20) {
                if (vectorSalarioEdad[j][1].equalsIgnoreCase("femenino")) {
                    entre1620F = entre1620F + Double.parseDouble(vectorSalarioEdad[j][2]);
                    contentre1620F++;
                } else {
                    entre1620M = entre1620M + Double.parseDouble(vectorSalarioEdad[j][2]);
                    contentre1620M++;
                }
            } else if (Double.parseDouble(vectorSalarioEdad[j][0]) <= 21 && Double.parseDouble(vectorSalarioEdad[j][0]) <= 30) {
                if (vectorSalarioEdad[j][1].equalsIgnoreCase("femenino")) {
                    entre2130F = entre2130F + Double.parseDouble(vectorSalarioEdad[j][2]);
                    contentre2130F++;
                } else {
                    entre2130M = entre2130M + Double.parseDouble(vectorSalarioEdad[j][2]);
                    contentre2130M++;
                }
            } else if (Double.parseDouble(vectorSalarioEdad[j][0]) <= 31 && Double.parseDouble(vectorSalarioEdad[j][0]) <= 40) {
                if (vectorSalarioEdad[j][1].equalsIgnoreCase("femenino")) {
                    entre3140F = entre3140F + Double.parseDouble(vectorSalarioEdad[j][2]);
                    contentre3140F++;
                } else {
                    entre3140M = entre3140M + Double.parseDouble(vectorSalarioEdad[j][2]);
                    contentre3140M++;
                }
            } else if (Double.parseDouble(vectorSalarioEdad[j][0]) > 40) {
                if (vectorSalarioEdad[j][1].equalsIgnoreCase("femenino")) {
                    mayor40F = mayor40F + Double.parseDouble(vectorSalarioEdad[j][2]);
                    contmayor40F++;
                } else {
                    mayor40M = mayor40M + Double.parseDouble(vectorSalarioEdad[j][2]);
                    contmayor40M++;
                }
            }
        }
        menor15F=menor15F/contmenor15F;
        menor15M=menor15M/contmenor15M;
        entre1620F=entre1620F/contentre1620F;
        entre1620M=entre1620M/contentre1620M;
        entre2130F=entre2130F/contentre2130F;
        entre2130M=entre2130M/contentre2130M;
        entre3140F=entre3140F/contentre3140F;
        entre3140M=entre3140M/contentre3140M;
        mayor40F=mayor40F/contmayor40F;
        mayor40M=mayor40M/contmayor40M;
        
        
        JFreeChart barra = null;
        DefaultCategoryDataset datos;
        datos = new DefaultCategoryDataset();
        datos.setValue(menor15F, "Femenino", "< 15");
        datos.setValue(menor15M, "Masculino", "< 15");
        datos.setValue(entre1620F, "Femenino", "16 - 20");
        datos.setValue(entre1620M, "Masculino", "16 - 20");
        datos.setValue(entre2130F, "Femenino", "21 - 30");
        datos.setValue(entre2130M, "Masculino", "21 - 30");
        datos.setValue(entre3140F, "Femenino", "31 - 40");
        datos.setValue(entre3140M, "Masculino", "31 - 40");
        datos.setValue(mayor40F, "Femenino", "> 40");
        datos.setValue(mayor40M, "Masculino", "> 40");
        barra = ChartFactory.createBarChart3D("Promedio Salario", "Edad", "Promedio", datos, PlotOrientation.VERTICAL, true, true, true);

        ChartFrame barraGrafica = new ChartFrame("JFreeChart", barra);
        barraGrafica.pack();
        barraGrafica.setVisible(true);
    }
    
    public static void lineas(BaseDeDatos con){
        con.conectar();
        Map<Integer, Double> treeMap = new TreeMap<Integer, Double>();
        Map<Integer, Integer> treeMapProm = new TreeMap<Integer, Integer>();
        
        try {
            Statement sta = con.getConexionDb().createStatement();
            ResultSet resultado = sta.executeQuery("SELECT \"PER_EDAD\",\"PER_SALARIO\" FROM \"PERSONA\"");
            int i = 0;
            while (resultado.next()) {
                int edad=resultado.getInt("PER_EDAD");
                double salario=resultado.getDouble("PER_SAlARIO");
                if (treeMap.containsKey(edad)==true){
                    treeMap.put(edad, treeMap.get(edad)+salario);
                    if (treeMapProm.containsKey(edad)==true){
                        treeMapProm.put(edad, treeMapProm.get(edad)+1);
                    }else {
                        treeMapProm.put(edad,1);
                    }
                }else {
                    treeMap.put(edad, salario);
                    treeMapProm.put(edad,1);
                }
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }
        con.desconectar();
        XYSeries series = null;
        XYDataset datos;
        JFreeChart linea = null;
         int x=0;

        series= new XYSeries("Promedio Salario");
        for (int i=0;i<100;i++){
            if (treeMap.containsKey(i)){
                treeMap.put(i, treeMap.get(i)/treeMapProm.get(i));
                series.add(i,treeMap.get(i).intValue());
            }
        }

        datos = new XYSeriesCollection(series);
        linea = ChartFactory.createXYLineChart("Promedio SALARIO","Edad","Salario Promedio",datos,PlotOrientation.VERTICAL,true,true,true);
       
        ChartFrame lineas = new ChartFrame("JFreeChart", linea);
        lineas.pack();
        lineas.setVisible(true);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipalReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipalReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipalReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipalReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaPrincipalReportes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField txtCedula;
    // End of variables declaration//GEN-END:variables
}
